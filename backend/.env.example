# Backend Environment Configuration Template
# Copy this file to .env and fill in your actual values
# 
# IMPORTANT: Never commit .env files to version control!
# This file contains backend-only configuration and sensitive API keys.

# ================================
# BACKEND CONFIGURATION
# ================================

# Node Environment
# Options: development, staging, production
NODE_ENV=development

# Server Configuration
PORT=3001

# CORS Configuration
# Comma-separated list of allowed frontend origins
CORS_ORIGINS=http://localhost:5174,http://localhost:5173,http://localhost:3000

# ================================
# API KEYS (Backend Only - Keep Secure!)
# ================================

# Thesys C1 API Configuration
# Get from: https://console.thesyslabs.com/api-keys
THESYS_C1_API_KEY=sk-th-your-api-key-here
# C1 API endpoint (official endpoint - OpenAI client appends /chat/completions)
THESYS_C1_ENDPOINT=https://api.thesys.dev/v1/embed
# Anthropic model to use with C1
ANTHROPIC_MODEL=c1/anthropic/claude-sonnet-4/v-20250815

# Direct Anthropic API Configuration (fallback)
# Get from: https://console.anthropic.com/keys
ANTHROPIC_API_KEY=sk-ant-your-api-key-here

# Firecrawl API Configuration
# Get from: https://firecrawl.dev/app/api-keys
FIRECRAWL_API_KEY=fc-your-firecrawl-api-key-here

# ================================
# C1 EXTRACTION CONFIGURATION
# ================================

# C1 Extraction Model Configuration
# Model specifically for property extraction (can be different from general C1 model)
C1_EXTRACTION_MODEL=c1/anthropic/claude-sonnet-4/v-20250815

# C1 Extraction Parameters
# Maximum tokens for extraction requests (8000 recommended for complex properties)
C1_EXTRACTION_MAX_TOKENS=8000

# Temperature for extraction (0.3 recommended for consistent structured output)
C1_EXTRACTION_TEMPERATURE=0.3

# Timeout for C1 extraction requests in milliseconds (60 seconds)
C1_EXTRACTION_TIMEOUT=60000

# ================================
# DATABASE CONFIGURATION
# ================================

# GCP Cloud SQL Database Configuration
DB_HOST=your-cloud-sql-ip-address
DB_PORT=5432
DB_NAME=gentle_space_realty
DB_USER=postgres
DB_PASSWORD=your-database-password

# Firebase Admin SDK Configuration
# Path to Firebase service account key file
GOOGLE_APPLICATION_CREDENTIALS=/path/to/your/firebase-service-account.json
# Firebase Project ID for Admin SDK
FIREBASE_PROJECT_ID=your-firebase-project-id

# Google Cloud Storage Configuration
GCS_PROJECT_ID=your-gcp-project-id
GCS_KEY_FILE_PATH=/path/to/your/gcp-service-account.json

# Storage Bucket Names
PROPERTY_IMAGES_BUCKET=gentle-space-property-images
PROPERTY_VIDEOS_BUCKET=gentle-space-property-videos
PROPERTY_MEDIA_BUCKET=gentle-space-property-media
USER_AVATARS_BUCKET=gentle-space-user-avatars
TESTIMONIAL_MEDIA_BUCKET=gentle-space-testimonial-media
DOCUMENTS_BUCKET=gentle-space-documents

# ================================
# AUTHENTICATION & SECURITY
# ================================

# JWT Configuration
# Generate a strong secret: openssl rand -base64 32
JWT_SECRET=your-super-secure-jwt-secret-key-change-this-in-production
JWT_EXPIRES_IN=1d

# Rate Limiting Configuration
RATE_LIMIT_ENABLED=false
RATE_LIMIT_MAX_REQUESTS=100
RATE_LIMIT_WINDOW_MS=900000

# ================================
# LOGGING CONFIGURATION
# ================================

# Logging level (error, warn, info, debug)
LOG_LEVEL=info

# Enable request logging
ENABLE_REQUEST_LOGGING=true

# ================================
# LEGACY CONFIGURATION
# ================================

# Legacy Supabase Configuration (for compatibility)
# These can be removed if not using Supabase services
SUPABASE_URL=https://legacy.supabase.co
SUPABASE_ANON_KEY=legacy-anon-key-for-compatibility
SUPABASE_SERVICE_ROLE_KEY=legacy-service-key-for-compatibility
SUPABASE_JWT_SECRET=your-very-long-and-secure-jwt-secret-key-here-minimum-32-characters

# ================================
# SECURITY BEST PRACTICES
# ================================

# API Key Security:
# - Rotate API keys monthly for production
# - Use different keys for dev/staging/production
# - Monitor API usage and set up billing alerts
# - Never expose these keys to frontend code
# - Rotate Firecrawl API keys and monitor usage to avoid rate limits

# Database Security:
# - Use strong passwords (minimum 16 characters)
# - Enable SSL connections in production
# - Restrict database access to known IP addresses
# - Regular security updates and patches

# File Security:
# - Ensure proper file permissions (600) for .env
# - Use absolute paths for service account files
# - Store service account files outside web root
# - Regular rotation of service account keys

# Network Security:
# - Use HTTPS in production
# - Implement proper CORS policies
# - Enable rate limiting for production
# - Monitor for suspicious activity

# ================================
# DEVELOPMENT SETUP INSTRUCTIONS
# ================================

# 1. Copy this file to .env:
#    cp .env.example .env

# 2. Fill in your actual API keys and configuration values

# 3. Set proper file permissions:
#    chmod 600 .env

# 4. Install dependencies:
#    npm install

# 5. Start the development server:
#    npm run dev

# 6. Test the configuration:
#    curl http://localhost:3001/health

# ================================
# PRODUCTION DEPLOYMENT NOTES
# ================================

# Environment Variables:
# - Use your hosting platform's environment variable system
# - Never commit production secrets to version control
# - Use separate environments for staging/production

# Security Headers:
# - Enable HTTPS/SSL certificates
# - Configure proper CORS origins
# - Set security headers (helmet middleware)

# Monitoring:
# - Set up health checks for /health endpoint
# - Monitor API usage and error rates
# - Configure alerts for failed requests

# Backup:
# - Regular database backups
# - Secure storage of backup files
# - Test restore procedures regularly