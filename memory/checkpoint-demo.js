#!/usr/bin/env node

/**\n * Memory Checkpoint System Demo\n * Demonstrates the key features and capabilities of the checkpoint system\n */\n\nconst CheckpointIntegration = require('./checkpoint-integration');\nconst path = require('path');\n\nclass CheckpointDemo {\n  constructor() {\n    this.integration = null;\n    this.demoData = {\n      agents: [\n        { id: 'frontend-001', type: 'frontend_specialist', capabilities: ['react', 'typescript'] },\n        { id: 'backend-001', type: 'backend_specialist', capabilities: ['nodejs', 'postgresql'] },\n        { id: 'qa-001', type: 'testing_specialist', capabilities: ['jest', 'playwright'] }\n      ],\n      tasks: [\n        { id: 'task-001', name: 'Build user interface', assignedTo: 'frontend-001', priority: 'high' },\n        { id: 'task-002', name: 'Create API endpoints', assignedTo: 'backend-001', priority: 'high' },\n        { id: 'task-003', name: 'Write integration tests', assignedTo: 'qa-001', priority: 'medium' }\n      ]\n    };\n  }\n\n  /**\n   * Run the complete demo\n   */\n  async runDemo() {\n    console.log('🚀 Memory Checkpoint System Demo');\n    console.log('=' .repeat(50));\n    \n    try {\n      await this.initializeDemo();\n      await this.demonstrateCheckpoints();\n      await this.demonstrateRecovery();\n      await this.demonstrateMonitoring();\n      await this.demonstrateIntegration();\n      await this.cleanup();\n      \n      console.log('\\n✅ Demo completed successfully!');\n      console.log('🎉 The checkpoint system is ready for production use.');\n      \n    } catch (error) {\n      console.error('❌ Demo failed:', error.message);\n      process.exit(1);\n    }\n  }\n\n  /**\n   * Initialize the demo environment\n   */\n  async initializeDemo() {\n    console.log('\\n🔧 Initializing Checkpoint System...');\n    \n    this.integration = new CheckpointIntegration({\n      memoryDir: './memory',\n      checkpointDir: './memory/checkpoints',\n      gitIntegrationEnabled: true,\n      autoRecoveryEnabled: true,\n      monitoringEnabled: true\n    });\n    \n    await this.integration.initialize();\n    \n    console.log('✅ Checkpoint system initialized');\n    const status = this.integration.getStatus();\n    console.log(`   📊 Health: ${status.checkpoint.healthy ? '🟢 Healthy' : '🔴 Unhealthy'}`);\n    console.log(`   🔄 Auto-recovery: ${status.recovery.enabled ? 'Enabled' : 'Disabled'}`);\n  }\n\n  /**\n   * Demonstrate checkpoint creation and management\n   */\n  async demonstrateCheckpoints() {\n    console.log('\\n📋 Demonstrating Checkpoint Operations...');\n    \n    // Create decision checkpoint\n    const decisionCheckpoint = await this.integration.checkpointSystem.createDecisionCheckpoint({\n      context: { operation: 'demo_initialization', phase: 'setup' },\n      selected: 'initialize_agents',\n      reasoning: 'Starting agent initialization for demo',\n      impact: 'medium',\n      reversible: true\n    });\n    \n    console.log(`✅ Decision checkpoint created: ${decisionCheckpoint}`);\n    \n    // Create operation checkpoint\n    const operationCheckpoint = await this.integration.checkpointSystem.createOperationCheckpoint({\n      name: 'demo_agent_spawn',\n      type: 'demonstration',\n      scope: 'demo',\n      riskLevel: 'low',\n      dependencies: []\n    });\n    \n    console.log(`✅ Operation checkpoint created: ${operationCheckpoint}`);\n    \n    // Show checkpoint statistics\n    const stats = this.integration.checkpointSystem.getCheckpointStats();\n    console.log(`📊 Total checkpoints: ${stats.total}`);\n    console.log(`📊 By type:`, stats.byType);\n    \n    await this.sleep(1000); // Small delay for demo flow\n  }\n\n  /**\n   * Demonstrate recovery capabilities\n   */\n  async demonstrateRecovery() {\n    console.log('\\n🔄 Demonstrating Recovery Capabilities...');\n    \n    // Create a backup before testing recovery\n    console.log('💾 Creating recovery backup...');\n    await this.integration.recoverySystem.createRecoveryBackups();\n    console.log('✅ Recovery backup created');\n    \n    // Demonstrate different recovery strategies\n    console.log('🧪 Testing recovery strategies...');\n    \n    try {\n      // Test agent memory recovery\n      const agentRecovery = await this.integration.recoverySystem.performRecovery('agent_memory_failure', {\n        agentId: 'demo-agent',\n        agentType: 'demo_specialist'\n      });\n      \n      console.log(`✅ Agent recovery test: ${agentRecovery.strategy}`);\n      \n    } catch (error) {\n      console.log(`ℹ️  Agent recovery test (expected): ${error.message}`);\n    }\n    \n    // Show recovery system status\n    const recoveryStatus = this.integration.recoverySystem.getRecoveryStatus();\n    console.log(`📊 Recovery history: ${recoveryStatus.totalRecoveries} total, ${recoveryStatus.successfulRecoveries} successful`);\n    console.log(`🛠️  Available strategies: ${recoveryStatus.availableStrategies.join(', ')}`);\n    \n    await this.sleep(1000);\n  }\n\n  /**\n   * Demonstrate monitoring and metrics\n   */\n  async demonstrateMonitoring() {\n    console.log('\\n📊 Demonstrating Monitoring and Metrics...');\n    \n    // Get memory usage\n    const memoryUsage = await this.integration.checkpointSystem.getMemoryUsage();\n    console.log('💾 Memory Usage:');\n    console.log(`   Checkpoints: ${memoryUsage.checkpoints}`);\n    console.log(`   Total size: ${this.formatBytes(memoryUsage.totalMemorySize)}`);\n    console.log(`   Compressed size: ${this.formatBytes(memoryUsage.compressedSize)}`);\n    \n    // Get memory metrics\n    const memoryMetrics = await this.integration.checkpointSystem.getMemoryMetrics();\n    console.log('🖥️  Process Metrics:');\n    console.log(`   Heap used: ${this.formatBytes(memoryMetrics.process.heapUsed)}`);\n    console.log(`   RSS: ${this.formatBytes(memoryMetrics.process.rss)}`);\n    \n    // Health check\n    const health = this.integration.checkpointSystem.getHealthStatus();\n    console.log(`🏥 System Health: ${health.healthy ? '🟢 Healthy' : '🔴 Unhealthy'}`);\n    \n    if (health.warnings.length > 0) {\n      console.log('⚠️  Warnings:');\n      health.warnings.forEach(warning => console.log(`   - ${warning}`));\n    } else {\n      console.log('✅ No warnings found');\n    }\n    \n    await this.sleep(1000);\n  }\n\n  /**\n   * Demonstrate hive mind integration\n   */\n  async demonstrateIntegration() {\n    console.log('\\n🔗 Demonstrating Hive Mind Integration...');\n    \n    // Simulate agent spawning\n    console.log('🤖 Spawning demo agents...');\n    for (const agent of this.demoData.agents) {\n      try {\n        const result = await this.integration.onAgentSpawn(agent);\n        console.log(`✅ Agent ${agent.id} spawned (checkpoint: ${result.checkpointId})`);\n      } catch (error) {\n        console.log(`ℹ️  Agent ${agent.id} spawn simulation: ${error.message}`);\n      }\n    }\n    \n    // Simulate task assignments\n    console.log('📋 Assigning demo tasks...');\n    for (const task of this.demoData.tasks) {\n      try {\n        const result = await this.integration.onTaskAssignment(task);\n        console.log(`✅ Task ${task.id} assigned (checkpoint: ${result.checkpointId})`);\n      } catch (error) {\n        console.log(`ℹ️  Task ${task.id} assignment simulation: ${error.message}`);\n      }\n    }\n    \n    // Simulate task completions\n    console.log('🎯 Completing demo tasks...');\n    for (const task of this.demoData.tasks) {\n      const taskResult = {\n        taskId: task.id,\n        agentId: task.assignedTo,\n        result: 'completed',\n        success: true,\n        duration: Math.floor(Math.random() * 5000) + 1000,\n        complexity: 'medium'\n      };\n      \n      try {\n        await this.integration.onTaskCompletion(taskResult);\n        console.log(`✅ Task ${task.id} completed`);\n      } catch (error) {\n        console.log(`ℹ️  Task ${task.id} completion simulation: ${error.message}`);\n      }\n    }\n    \n    // Simulate coordination event\n    await this.integration.onCoordinationEvent({\n      type: 'demo_coordination',\n      agents: this.demoData.agents.map(a => a.id),\n      message: 'Demo coordination completed',\n      timestamp: Date.now()\n    });\n    \n    console.log('🔗 Coordination event processed');\n    \n    await this.sleep(1000);\n  }\n\n  /**\n   * Demonstrate session management\n   */\n  async demonstrateSessionManagement() {\n    console.log('\\n💼 Demonstrating Session Management...');\n    \n    // Create session checkpoint\n    const sessionCheckpoint = await this.integration.checkpointSystem.createSessionCheckpoint({\n      type: 'demo_milestone',\n      description: 'Demo session milestone reached'\n    });\n    \n    console.log(`✅ Session checkpoint created: ${sessionCheckpoint}`);\n    \n    // Create rollback point\n    const rollbackPoint = await this.integration.checkpointSystem.createRollbackPoint(\n      'Demo rollback point for testing'\n    );\n    \n    console.log(`✅ Rollback point created: ${rollbackPoint}`);\n    \n    // Persist session memory\n    if (this.integration.checkpointSystem.currentSession) {\n      const sessionDir = await this.integration.checkpointSystem.persistSessionMemory(\n        this.integration.checkpointSystem.currentSession.id\n      );\n      \n      console.log(`✅ Session memory persisted to: ${sessionDir}`);\n    }\n    \n    await this.sleep(1000);\n  }\n\n  /**\n   * Cleanup demo resources\n   */\n  async cleanup() {\n    console.log('\\n🧹 Cleaning up demo resources...');\n    \n    try {\n      // Create final demo checkpoint\n      await this.integration.createManualCheckpoint('Demo completion checkpoint');\n      \n      // End session if active\n      if (this.integration.checkpointSystem.currentSession) {\n        const sessionId = await this.integration.checkpointSystem.endSession();\n        console.log(`✅ Session ended: ${sessionId}`);\n      }\n      \n      // Create final backup\n      await this.integration.recoverySystem.createRecoveryBackups();\n      console.log('✅ Final backup created');\n      \n      console.log('✅ Cleanup completed');\n      \n    } catch (error) {\n      console.warn('⚠️  Cleanup warning:', error.message);\n    }\n  }\n\n  /**\n   * Interactive demo mode\n   */\n  async runInteractiveDemo() {\n    const readline = require('readline');\n    const rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n    \n    console.log('\\n🎮 Interactive Demo Mode');\n    console.log('Available commands:');\n    console.log('  1. status    - Show system status');\n    console.log('  2. create    - Create manual checkpoint');\n    console.log('  3. list      - List checkpoints');\n    console.log('  4. recovery  - Test recovery');\n    console.log('  5. metrics   - Show metrics');\n    console.log('  6. health    - Run health check');\n    console.log('  7. quit      - Exit demo');\n    \n    const askCommand = () => {\n      rl.question('\\n🎯 Enter command (1-7): ', async (answer) => {\n        try {\n          switch (answer.trim()) {\n            case '1':\n            case 'status':\n              const status = this.integration.getStatus();\n              console.log('📊 Status:', JSON.stringify(status, null, 2));\n              break;\n              \n            case '2':\n            case 'create':\n              const checkpointId = await this.integration.createManualCheckpoint('Interactive demo checkpoint');\n              console.log(`✅ Checkpoint created: ${checkpointId}`);\n              break;\n              \n            case '3':\n            case 'list':\n              const stats = this.integration.checkpointSystem.getCheckpointStats();\n              console.log('📋 Checkpoints:', stats);\n              break;\n              \n            case '4':\n            case 'recovery':\n              try {\n                await this.integration.recoverySystem.performRecovery('agent_memory_failure', { agentId: 'demo' });\n                console.log('✅ Recovery test completed');\n              } catch (error) {\n                console.log(`ℹ️  Recovery test: ${error.message}`);\n              }\n              break;\n              \n            case '5':\n            case 'metrics':\n              const metrics = await this.integration.checkpointSystem.getMemoryMetrics();\n              console.log('📊 Metrics:', {\n                heap: this.formatBytes(metrics.process.heapUsed),\n                rss: this.formatBytes(metrics.process.rss),\n                checkpoints: metrics.checkpoints\n              });\n              break;\n              \n            case '6':\n            case 'health':\n              const health = this.integration.checkpointSystem.getHealthStatus();\n              console.log(`🏥 Health: ${health.healthy ? '🟢 Healthy' : '🔴 Unhealthy'}`);\n              if (health.warnings.length > 0) {\n                console.log('⚠️  Warnings:', health.warnings);\n              }\n              break;\n              \n            case '7':\n            case 'quit':\n              console.log('👋 Exiting interactive demo...');\n              await this.cleanup();\n              rl.close();\n              return;\n              \n            default:\n              console.log('❌ Unknown command. Please enter 1-7 or command name.');\n          }\n        } catch (error) {\n          console.error('❌ Command failed:', error.message);\n        }\n        \n        askCommand(); // Ask for next command\n      });\n    };\n    \n    // Initialize for interactive mode\n    await this.initializeDemo();\n    askCommand();\n  }\n\n  /**\n   * Benchmark the checkpoint system\n   */\n  async runBenchmark() {\n    console.log('\\n⚡ Checkpoint System Benchmark');\n    console.log('=' .repeat(40));\n    \n    await this.initializeDemo();\n    \n    const iterations = 50;\n    const results = {\n      checkpointCreation: [],\n      memorySnapshot: [],\n      recovery: [],\n      validation: []\n    };\n    \n    console.log(`\\n📊 Running ${iterations} iterations...`);\n    \n    // Benchmark checkpoint creation\n    console.log('🔄 Benchmarking checkpoint creation...');\n    for (let i = 0; i < iterations; i++) {\n      const start = Date.now();\n      await this.integration.createManualCheckpoint(`Benchmark checkpoint ${i}`);\n      results.checkpointCreation.push(Date.now() - start);\n      \n      if ((i + 1) % 10 === 0) {\n        process.stdout.write(`${i + 1}/${iterations} `);\n      }\n    }\n    console.log('');\n    \n    // Benchmark memory snapshots\n    console.log('📸 Benchmarking memory snapshots...');\n    for (let i = 0; i < 10; i++) {\n      const start = Date.now();\n      await this.integration.checkpointSystem.captureMemorySnapshot();\n      results.memorySnapshot.push(Date.now() - start);\n      process.stdout.write(`${i + 1}/10 `);\n    }\n    console.log('');\n    \n    // Benchmark recovery operations\n    console.log('🔄 Benchmarking recovery operations...');\n    for (let i = 0; i < 5; i++) {\n      try {\n        const start = Date.now();\n        await this.integration.recoverySystem.performRecovery('agent_memory_failure', { agentId: `bench-${i}` });\n        results.recovery.push(Date.now() - start);\n        process.stdout.write(`${i + 1}/5 `);\n      } catch (error) {\n        // Expected for demo\n      }\n    }\n    console.log('');\n    \n    // Calculate and display results\n    console.log('\\n📊 Benchmark Results:');\n    console.log('=' .repeat(30));\n    \n    this.displayBenchmarkResults('Checkpoint Creation', results.checkpointCreation);\n    this.displayBenchmarkResults('Memory Snapshot', results.memorySnapshot);\n    this.displayBenchmarkResults('Recovery Operations', results.recovery);\n    \n    await this.cleanup();\n  }\n\n  /**\n   * Display benchmark results\n   */\n  displayBenchmarkResults(operation, times) {\n    if (times.length === 0) return;\n    \n    const avg = times.reduce((a, b) => a + b, 0) / times.length;\n    const min = Math.min(...times);\n    const max = Math.max(...times);\n    const median = times.sort((a, b) => a - b)[Math.floor(times.length / 2)];\n    \n    console.log(`\\n${operation}:`);\n    console.log(`  Average: ${avg.toFixed(2)}ms`);\n    console.log(`  Median:  ${median.toFixed(2)}ms`);\n    console.log(`  Min:     ${min.toFixed(2)}ms`);\n    console.log(`  Max:     ${max.toFixed(2)}ms`);\n    console.log(`  Samples: ${times.length}`);\n  }\n\n  /**\n   * Format bytes to human readable format\n   */\n  formatBytes(bytes) {\n    if (bytes === 0) return '0 B';\n    \n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    \n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  /**\n   * Sleep for specified milliseconds\n   */\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n// Main execution\nif (require.main === module) {\n  const demo = new CheckpointDemo();\n  const args = process.argv.slice(2);\n  \n  if (args.includes('--interactive') || args.includes('-i')) {\n    demo.runInteractiveDemo().catch(error => {\n      console.error('❌ Interactive demo failed:', error.message);\n      process.exit(1);\n    });\n  } else if (args.includes('--benchmark') || args.includes('-b')) {\n    demo.runBenchmark().catch(error => {\n      console.error('❌ Benchmark failed:', error.message);\n      process.exit(1);\n    });\n  } else {\n    demo.runDemo().catch(error => {\n      console.error('❌ Demo failed:', error.message);\n      process.exit(1);\n    });\n  }\n}\n\nmodule.exports = CheckpointDemo;