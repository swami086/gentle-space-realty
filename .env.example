# =============================================================================
# ENVIRONMENT CONFIGURATION GUIDE
# =============================================================================
# 
# This project now uses a clean, centralized environment configuration system
# with proper separation between frontend and backend environment variables.
#
# QUICK SETUP:
# 1. For frontend development: Copy config/frontend.env.example to .env.local
# 2. For backend development: Copy config/backend.env.example to .env
# 3. Run: npm run setup-env (automated setup script)
# 4. Validate: npm run validate-env
#
# ENVIRONMENT STRUCTURE:
# - config/frontend.env.example - Frontend-specific variables (VITE_* prefix)
# - config/backend.env.example  - Backend-specific variables (server-side only)
# - This file (.env.example)    - General documentation and setup guide
#
# =============================================================================

# LEGACY VARIABLES (Deprecated - Use New Structure)
# ======================================================================================
# The following variables are kept for backward compatibility during transition.
# Please use the new centralized environment system instead.

# Backend API Configuration (Use config/frontend.env.example instead)
VITE_API_BASE_URL=http://localhost:3001/api

# Google Maps API Configuration (Use config/frontend.env.example instead)
VITE_GOOGLE_MAPS_API_KEY=your-google-maps-api-key

# Google OAuth Configuration (Use config/frontend.env.example instead)
VITE_GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com

# Application Environment (Use config/frontend.env.example instead)
VITE_APP_ENV=development

# Debug Mode (Use config/frontend.env.example instead)
VITE_DEBUG_MODE=true

# Thesys C1 Configuration - SECURITY UPDATE
# ⚠️  C1 API KEYS MOVED TO BACKEND FOR SECURITY
# API keys are no longer exposed in frontend environment variables
# Frontend now uses secure backend proxy at /api/c1/* endpoints
# 
# Previous (INSECURE - DEPRECATED):
# VITE_THESYS_C1_API_KEY=your-thesys-c1-api-key        # ❌ REMOVED
# VITE_ANTHROPIC_API_KEY=your-anthropic-api-key        # ❌ REMOVED
# 
# Current (SECURE):
# - API keys stored in backend/.env (no VITE_ prefix)
# - Frontend makes requests to backend proxy endpoints
# - See backend/.env.example for API key configuration

# Frontend C1 Configuration (Use config/frontend.env.example instead)
# These are safe for client-side as they don't contain API keys
REACT_APP_C1_EXTRACTION_ENABLED=true
REACT_APP_C1_EXTRACTION_TIMEOUT=60000

# CRITICAL SECURITY WARNINGS:
# ======================================================================================
# ⚠️  NEVER COMMIT REAL SECRETS TO VERSION CONTROL
# ⚠️  CREATE .env.local WITH REAL VALUES (ALREADY IN .gitignore)
# ⚠️  ROTATE KEYS MONTHLY FOR PRODUCTION ENVIRONMENTS
# ⚠️  USE DIFFERENT KEYS FOR DEV/STAGING/PRODUCTION
#
# SECURITY RULES:
# - VITE_* variables are bundled into the client and visible to users
# - Never put secrets, API keys, or sensitive data in VITE_* variables
# - All variables above are safe for client-side exposure
# - Google Maps API key should have domain restrictions enabled
#
# KEY ROTATION REQUIRED:
# - Supabase keys: Monthly rotation recommended
# - Google OAuth Client ID: Quarterly rotation recommended
# - Google Maps API key: Enable domain restrictions and monitor usage

# SUPABASE GOOGLE OAUTH SETUP GUIDE:
# ======================================================================================
# 1. In Supabase Dashboard:
#    - Go to Authentication > Providers > Google
#    - Enable Google provider
#    - Add your Google Client ID and Client Secret
#    - Set redirect URL: https://your-project.supabase.co/auth/v1/callback
#
# 2. In Google Cloud Console:
#    - Go to APIs & Services > Credentials
#    - Create OAuth 2.0 Client ID (Web application)
#    - Add authorized JavaScript origins: https://your-domain.com
#    - Add authorized redirect URIs: https://your-project.supabase.co/auth/v1/callback
#
# 3. Environment Variables:
#    - VITE_GOOGLE_CLIENT_ID: Public client ID (safe for client-side)
#
# 4. User Table Requirements:
#    - Ensure users table has: id, email, name, role, created_at, updated_at
#    - Set up Row Level Security (RLS) policies for user data protection